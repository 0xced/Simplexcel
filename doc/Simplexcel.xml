<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
	<info>
		<title>Simplexcel</title>
		<subtitle>Excel .xlsx generation library for .net 4</subtitle>
	</info>
	<chapter>
		<title>Overview</title>
		<sect1>
			<title>About</title>
			<para>Simplexcel is a simple library to generate Excel 2007+ workbooks in their native .xlsx format without relying on COM interop or other mechanisms unsuitable for server use.</para>
			<para role="nuget-badge">
				<code>PM&gt; Install-Package simplexcel</code>
			</para>
		</sect1>
	</chapter>
	<chapter>
		<title>Examples</title>
		<sect1>
			<title>Creating a Workbook</title>
			<para>The simple example of creating a workbook only requires you to create a few Worksheets, populate their Cells, and add them to a new Workbook.</para>
			<programlisting role="lang-cs">
// using Simplexcel;
var sheet = new Worksheet("Hello, world!");
sheet.Cells[0, 0] = "Hello,";
sheet.Cells["B1"] = "World!";

var workbook = new Workbook();
workbook.Add(sheet);
workbook.Save(@"d:\test.xlsx");
		</programlisting>
		</sect1>
		<sect1>
			<title>Cell creation</title>
			<para>Cells can be created implicitly from strings, int64's, double and decimal (and anything that's implicitly convertible to those, e.g. int32), or explicitly through the Cell constructor.</para>
			<programlisting role="lang-cs">
Cell textCell = "fromString";
Cell intCell = 4; // will be formatted as number without decimal places "0"
Cell doubleCell = 123.456; // will be formatted with 2 decimal places, "0.00"
Cell decimalCell = 987.654321m; // will be formatted with 2 decimal places, "0.00"
decimalCell.Format = "0.000"; // override the cell format with an Excel Formatting string

// Explicit constructor, specifying the type, value and format (Excel will display this as 88.75%)
Cell decimalWithFormat = new Cell(CellType.Number, 0.8875m, BuiltInCellFormat.PercentTwoDecimalPlaces);
			</programlisting>
		</sect1>
		<sect1>
			<title>Cell formatting</title>
			<para>After you've added a cell, you can set formatting like Bold or Font Size or Border on it.</para>
			<programlisting role="lang-cs">
// Addressing cells via zero-based row and column index...
sheet.Cells[0, 0] = "Hello,";
sheet.Cells[0, 0].Bold = true;
// ...or Excel-style references, B1 = [0,1]
sheet.Cells["B1"] = "World!";
sheet.Cells["B1"].Border = CellBorder.Bottom | CellBorder.Right;

Cell myCell = "Test Cell";
myCell.FontName = "Comic Sans MS";
myCell.FontSize = 18;
myCell.TextColor = System.Drawing.Color.Violet;
myCell.Bold = true;
myCell.Italic = true;
myCell.Underline = true;
myCell.Border = CellBorder.All; // Left | Right | Top | Bottom
sheet.Cells[0, 2] = myCell;

// To change the width of a column, specify a value. Specifying NULL will use the default
sheet.ColumnWidths[2] = 30;
			</programlisting>
			<para>In Excel, this will create a beautiful sheet:</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/formatting.png"></imagedata>
				</imageobject>
			</mediaobject>
		</sect1>
		<sect1>
			<title>Page Setup</title>
			<para>A Worksheet has a PageSetup property that contains the orientation (portrait or landscape) and a setting to repeat a number of rows or columns (starting from the top and left respectively) on every page when printing.</para>
			<programlisting role="lang-cs">
var sheet = new Worksheet("Hello, world!");
sheet.PageSetup.PrintRepeatRows = 2; // How many rows (starting with the top one)
sheet.PageSetup.PrintRepeatColumns = 0; // How many columns (starting with the left one, 0 is default)
sheet.PageSetup.Orientation = Orientation.Landscape;


sheet.Cells["A1"] = "Title!";
sheet.Cells["A1"].Bold = true;
sheet.Cells["A2"] = "Subtitle!";
sheet.Cells["A2"].Bold = true;
sheet.Cells["A2"].TextColor = System.Drawing.Color.Magenta;
for (int i = 0; i &lt; 100; i++)
{
    sheet.Cells[i + 2, 0] = "Entry Number " + (i + 1);
}
			</programlisting>
			<para>This looks like this when printing:</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/repeatrows.png"></imagedata>
				</imageobject>
			</mediaobject>
		</sect1>
		<sect1>
			<title>Hyperlinks</title>
			<para>You can create Hyperlinks for a cell.</para>
			<programlisting role="lang-cs">
sheet.Cells["A1"] = "Click me now!";
sheet.Cells["A1"].Hyperlink = "http://mstum.github.io/Simplexcel/";
			</programlisting>
			<para>This will NOT automatically format it as a Hyperlink (blue/underlined) to give you freedom to format as desired.</para>
		</sect1>
		<sect1>
			<title>Polish &amp; Misc.</title>
			<para>You can specify a Compression level. By default, a balance between size and performance is chosen.</para>
			<programlisting role="lang-cs">
workbook.Save(@"d:\testNoComp.xlsx", CompressionLevel.NoCompression);
workbook.Save(@"d:\testDefault.xlsx", CompressionLevel.Balanced); // default for Save(string)
workbook.Save(@"d:\testMaxComp.xlsx", CompressionLevel.Maximum);
			</programlisting>
			<para>You can also save to a Stream. The Stream must be writable.</para>
			<programlisting role="lang-cs">
workbook.Save(HttpContext.Current.Response.OutputStream, CompressionLevel.Maximum);
			</programlisting>
			<para>The workbook class allows you to add an Author and Title, which will show up in the Properties pane.</para>
			<programlisting role="lang-cs">
var workbook = new Workbook();
workbook.Title = "Hello, World!";
workbook.Author = "My Application Version 1.0.0.5";
			</programlisting>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/titleauthor.png"></imagedata>
				</imageobject>
			</mediaobject>
			<para>To help troubleshooting issues with generated xlsx files, they contain a file called simplexcel.xml which contains version information and the date the document was generated.</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/simplexcelxml.png"></imagedata>
				</imageobject>
			</mediaobject>
			<programlisting role="lang-xml">
&lt;docInfo xmlns="http://stum.de/simplexcel/v1"&gt;
	&lt;version major="1" minor="0" build="2" revision="0"&gt;&lt;/version&gt;
	&lt;created&gt;2012-09-07T21:04:18.5220876Z&lt;/created&gt;
&lt;/docInfo&gt;				
			</programlisting>
		</sect1>
		<sect1>
			<title>Caveats and Exceptions</title>
			<para>Here's a list of things to be aware of when working with Simplexcel</para>
<programlisting role="lang-cs">
// Sheet names cannot be NULL or empty
new Worksheet(null); // ArgumentException
new Worksheet(""); // ArgumentException

// Sheet names cannot be longer than 31 chars
new Worksheet(new string('a', 32));  // ArgumentException

// Sheet names cannot contain these chars: \ / ? * [ ]
new Worksheet("Data for 09/22/2012"); // ArgumentException

// There are static properties on the Worksheet class to help you create valid names
int maxLength = Worksheet.MaxSheetNameLength;
char[] invalidChars = Worksheet.InvalidSheetNameChars;

// Within a workbook, sheet names must be unique
var wb = new Workbook();
var sheet1 = new Worksheet("Hello!");
var sheet2 = new Worksheet("Hello!");
wb.Add(sheet1);
wb.Add(sheet2); // ArgumentException

// Accessing a cell before it's been assigned returns NULL
sheet1.Cells["A1"].Bold = true; // NullReferenceException	
</programlisting>
		</sect1>
	</chapter>
	<chapter>
		<title>ActionResult for ASP.net MVC</title>
		<para>If you want to generate Excel Sheets as part of an ASP.net MVC action, you can use this abstract class as an ActionResult. A derived class would simply override GenerateWorkbook. This assumes that the controller merely creates a model, and that the actual workbook generation happens after the action is executed and ActionResult.ExecuteResult is called. Alternatively, you can change it to take a Workbook in the constructor and create the Workbook in the MVC Controller Action.</para>
		<programlisting role="lang-cs">
public abstract class ExcelResultBase : ActionResult
{
	private readonly string _filename;

	protected ExcelResultBase(string filename)
	{
		_filename = filename;
	}

	protected abstract Workbook GenerateWorkbook();

	public override void ExecuteResult(ControllerContext context)
	{
		if (context == null)
		{
			throw new ArgumentNullException("context");
		}

		var workbook = GenerateWorkbook();
		if (workbook == null)
		{
			context.HttpContext.Response.StatusCode = (int)HttpStatusCode.NotFound;
			return;
		}

		context.HttpContext.Response.ContentType = "application/octet-stream";
		context.HttpContext.Response.StatusCode = (int)HttpStatusCode.OK;
		context.HttpContext.Response.AppendHeader("content-disposition", "attachment; filename=\"" + _filename + "\"");
		workbook.Save(context.HttpContext.Response.OutputStream, CompressionLevel.NoCompression);
	}
}
		</programlisting>
	</chapter>
  <chapter>
      <title>Version History</title>
  	<para>
  		<emphasis role="bold">Version 1.0.3 (2013-08-20)</emphasis>
  	</para>
  	<itemizedlist>
  		<listitem>
  			<para>Added support for external hyperlinks</para>
  		</listitem>
  		<listitem>
  			<para>Made Workbooks serializable using the .net DataContractSerializer</para>
  		</listitem>
  	</itemizedlist>
      <para>
        <emphasis role="bold">Version 1.0.2 (2013-01-10)</emphasis>
      </para>
      <itemizedlist>
        <listitem>
          <para>Initial public release.</para>
        </listitem>
      </itemizedlist>
  </chapter>
  <chapter>
    <title>License</title>
    <para>The MIT License (MIT)</para>
    <para>Copyright (c) 2013 Michael Stum, http://www.Stum.de opensource@stum.de</para>
    <para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</para>
    <para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</para>
    <para>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</para>
  </chapter>
</book>
