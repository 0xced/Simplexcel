name: CI Build

on:
  pull_request:
  push:
    paths:
      - "src/**"
      - ".github/workflows/**"
      - "scripts/**"

# To avoid vendor lock-in, this is mostly driven by a build script
jobs:
  build-linux: # Sanity check build
    name: Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Run build script
        shell: pwsh
        run: |
          $Env:GIT_BRANCH=$Env:GITHUB_REF
          $Env:build_artifactsDir=$Env:RUNNER_TEMP
          cd scripts
          ./build.ps1
          Get-ChildItem Env: | Where-Object {$_.Name -Match "^MH_"}
  build: # Actual prod build
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      # To avoid vendor lock-in, this is mostly driven by a build script
      - name: Run build script
        id: pwshbuild
        shell: pwsh
        run: |
          $Env:GIT_BRANCH=$Env:GITHUB_REF
          $Env:build_artifactsDir=$Env:RUNNER_TEMP
          cd scripts
          ./build.ps1
          Get-ChildItem Env: | Where-Object {$_.Name -Match "^MH_"}
          Get-ChildItem Env: | Where-Object {$_.Name -Match "^MH_"} | %{ "$($_.Name)=$($_.Value)" -replace '\\', '\\' } | Out-File "$Env:RUNNER_TEMP/mhbuild.txt"
          Get-ChildItem Env: | Where-Object {$_.Name -Match "^MH_"} | %{ echo "::set-output name=$($_.Name)::$($_.Value)" }
      - name: Setup Nuget.exe
        if: success() && !startsWith(github.ref, 'refs/pull')
        uses: warrenbuckley/Setup-Nuget@v1
      - name: Add private GitHub registry to NuGet
        if: success() && !startsWith(github.ref, 'refs/pull')
        run: nuget sources add -name "GPR" -Source https://nuget.pkg.github.com/mstum/index.json -Username mstum -Password ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to GPR (Development)
        if: success() && steps.pwshbuild.outputs.MH_IS_PROD_BUILD == 'False'
        shell: pwsh
        run: |
          $buildOut = Get-Content -Raw "$Env:RUNNER_TEMP/mhbuild.txt"
          $buildOut | Write-Host
          $mhv = $buildOut | ConvertFrom-StringData
          $mhv | Format-Table
          $nupkgPath = "$($mhv.MH_BUILD_OUTPUT)/simplexcel.$($mhv.MH_BUILD_VERSION_PACKAGE).nupkg"
          
          # Publish to GitHub Package Repository
          Write-Host "Dev build, pushing to GPR: $nupkgPath"
          nuget push "$nupkgPath" -Source "GPR" -SkipDuplicate
      - name: Publish to Nuget.org (Release)
        if: success() && steps.pwshbuild.outputs.MH_IS_PROD_BUILD == 'True'
        shell: pwsh
        run: |
          $buildOut = Get-Content -Raw "$Env:RUNNER_TEMP/mhbuild.txt"
          $buildOut | Write-Host
          $mhv = $buildOut | ConvertFrom-StringData
          $mhv | Format-Table
          $nupkgPath = "$($mhv.MH_BUILD_OUTPUT)/simplexcel.$($mhv.MH_BUILD_VERSION_PACKAGE).nupkg"
          
          # Publish to Nuget.org
          Write-Host "Release build, pushing to Nuget.org: $nupkgPath"
          dotnet nuget push "$nupkgPath" -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json
